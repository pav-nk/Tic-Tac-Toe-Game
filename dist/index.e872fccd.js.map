{"mappings":"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","sources":["<anon>","src/app.js"],"sourcesContent":["function Gameboard() {\n    const rows = 3;\n    const columns = 3;\n    const board = [];\n    const hashIdBoard = [\n        [\n            0,\n            1,\n            2\n        ],\n        [\n            3,\n            4,\n            5\n        ],\n        [\n            6,\n            7,\n            8\n        ]\n    ];\n    for(let i = 0; i < rows; i++){\n        board[i] = [];\n        for(let j = 0; j < columns; j++)board[i].push(Cell(i, j, hashIdBoard[i][j]));\n    }\n    const getBoard = ()=>board;\n    const setToken = ({ x, y }, token)=>{\n        if (board[x][y].getValue() !== \"-\") return;\n        board[x][y].addToken(token);\n    };\n    return {\n        getBoard,\n        setToken\n    };\n}\nfunction Cell(x, y, hashId) {\n    let value = \"-\";\n    const addToken = (token)=>{\n        value = token;\n    };\n    const getValue = ()=>value;\n    const getCoordinates = ()=>{\n        return {\n            x,\n            y\n        };\n    };\n    const getHashId = ()=>{\n        return hashId;\n    };\n    return {\n        addToken,\n        getValue,\n        getCoordinates,\n        getHashId\n    };\n}\nfunction GameController(playerOneName = \"Player One\", playerTwoName = \"Player Two\") {\n    const board = Gameboard();\n    let countSteps = 0;\n    const players = [\n        {\n            name: playerOneName,\n            token: \"X\"\n        },\n        {\n            name: playerTwoName,\n            token: \"0\"\n        }\n    ];\n    let activePlayer = players[0];\n    const switchPlayerTurn = ()=>{\n        activePlayer = activePlayer === players[0] ? players[1] : players[0];\n    };\n    const getActivePlayer = ()=>activePlayer;\n    const isVictory = ()=>{\n        const combs = [\n            [\n                0,\n                1,\n                2\n            ],\n            [\n                3,\n                4,\n                5\n            ],\n            [\n                6,\n                7,\n                8\n            ],\n            [\n                0,\n                3,\n                6\n            ],\n            [\n                1,\n                4,\n                7\n            ],\n            [\n                2,\n                5,\n                8\n            ],\n            [\n                0,\n                4,\n                8\n            ],\n            [\n                2,\n                4,\n                6\n            ]\n        ];\n        for (let comb of combs){\n            const currentBoardLine = comb.map((item)=>{\n                const [currentCell] = board.getBoard().flat().filter((cell)=>item === cell.getHashId());\n                return currentCell;\n            });\n            const currentBoardLineTokens = currentBoardLine.map((cell)=>cell.getValue()).join(\"\");\n            if (currentBoardLineTokens === \"XXX\" || currentBoardLineTokens === \"000\") return true;\n        }\n        return false;\n    };\n    const isCorrectRound = (x, y)=>{\n        const value = board.getBoard()[x][y].getValue();\n        return value === \"X\" || value === \"0\";\n    };\n    const playRound = (coordinates, updateField)=>{\n        const { x, y } = coordinates;\n        if (!isCorrectRound(x, y)) {\n            updateStatusGame(`${getActivePlayer().name} set the token by coordinates: x: ${x} and y: ${y}`);\n            board.setToken(coordinates, getActivePlayer().token);\n            updateField(x, y, getActivePlayer().token);\n            countSteps += 1;\n        } else {\n            updateStatusGame(\"Set the value to an empty cell!\");\n            return false;\n        }\n        if (isVictory()) {\n            updateStatusGame(`${getActivePlayer().name} is the winner! Game over!`);\n            return true;\n        }\n        if (countSteps === 9) {\n            updateStatusGame(`It's a draw! Game over!`);\n            return true;\n        }\n        switchPlayerTurn();\n        updateTurnStatus(`${getActivePlayer().name}'s turn.`);\n        return false;\n    };\n    return {\n        playRound\n    };\n}\nfunction updateStatusGame(text = \"\") {\n    const statusGame = document.getElementById(\"status-game\");\n    statusGame.innerHTML = text;\n}\nfunction updateTurnStatus(text = \"\") {\n    const statusTurn = document.getElementById(\"status-turn\");\n    statusTurn.innerHTML = text;\n}\nfunction ScreenController(playRound) {\n    const gameBoard = document.getElementById(\"game-board\");\n    const restartBtn = document.getElementById(\"restart-btn\");\n    const fields = [\n        ...gameBoard.querySelectorAll(\".field\")\n    ];\n    const updateField = (x, y, token)=>{\n        const currentField = fields.find((el)=>{\n            return Number(el.dataset.x) === x && Number(el.dataset.y) === y;\n        });\n        const currentSpan = currentField.querySelector(\"span\");\n        currentSpan.innerText = token;\n    };\n    const clearCellValues = ()=>{\n        fields.forEach((field)=>{\n            const span = field.querySelector(\"span\");\n            span.innerText = \"-\";\n        });\n    };\n    const clickHandlerBoard = (evt)=>{\n        const { currentTarget } = evt;\n        const { x, y } = currentTarget.dataset;\n        const isGameOver = playRound({\n            x: Number(x),\n            y: Number(y)\n        }, updateField);\n        if (isGameOver) fields.forEach((field)=>{\n            field.removeEventListener(\"click\", clickHandlerBoard);\n        });\n    };\n    fields.forEach((field)=>{\n        field.addEventListener(\"click\", clickHandlerBoard);\n    });\n    restartBtn.addEventListener(\"click\", ()=>{\n        runGame();\n        clearCellValues();\n    });\n}\nfunction runGame() {\n    const { playRound } = GameController();\n    ScreenController(playRound);\n}\nrunGame();\n\n//# sourceMappingURL=index.e872fccd.js.map\n","function Gameboard() {\n    const rows = 3;\n    const columns = 3;\n    const board = [];\n    const hashIdBoard = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n    ];\n\n    for (let i = 0; i < rows; i++) {\n        board[i] = [];\n        for (let j = 0; j < columns; j++) {\n            board[i].push(Cell(i, j, hashIdBoard[i][j]));\n        }\n    }\n\n    const getBoard = () => board;\n\n    const setToken = ({ x, y }, token) => {\n        if (board[x][y].getValue() !== \"-\") return;\n\n        board[x][y].addToken(token);\n    };\n\n    return { getBoard, setToken };\n}\n\nfunction Cell(x, y, hashId) {\n    let value = \"-\";\n\n    const addToken = (token) => {\n        value = token;\n    };\n\n    const getValue = () => value;\n\n    const getCoordinates = () => {\n        return { x, y };\n    };\n\n    const getHashId = () => {\n        return hashId;\n    };\n\n    return {\n        addToken,\n        getValue,\n        getCoordinates,\n        getHashId,\n    };\n}\n\nfunction GameController(\n    playerOneName = \"Player One\",\n    playerTwoName = \"Player Two\"\n) {\n    const board = Gameboard();\n    let countSteps = 0;\n    const players = [\n        {\n            name: playerOneName,\n            token: \"X\",\n        },\n        {\n            name: playerTwoName,\n            token: \"0\",\n        },\n    ];\n\n    let activePlayer = players[0];\n\n    const switchPlayerTurn = () => {\n        activePlayer = activePlayer === players[0] ? players[1] : players[0];\n    };\n    const getActivePlayer = () => activePlayer;\n\n    const isVictory = () => {\n        const combs = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ];\n\n        for (let comb of combs) {\n            const currentBoardLine = comb.map((item) => {\n                const [currentCell] = board\n                    .getBoard()\n                    .flat()\n                    .filter((cell) => item === cell.getHashId());\n                return currentCell;\n            });\n            const currentBoardLineTokens = currentBoardLine\n                .map((cell) => cell.getValue())\n                .join(\"\");\n            if (\n                currentBoardLineTokens === \"XXX\" ||\n                currentBoardLineTokens === \"000\"\n            )\n                return true;\n        }\n\n        return false;\n    };\n\n    const isCorrectRound = (x, y) => {\n        const value = board.getBoard()[x][y].getValue();\n        return value === \"X\" || value === \"0\";\n    };\n\n    const playRound = (coordinates, updateField) => {\n        const { x, y } = coordinates;\n        if (!isCorrectRound(x, y)) {\n            updateStatusGame(\n                `${\n                    getActivePlayer().name\n                } set the token by coordinates: x: ${x} and y: ${y}`\n            );\n            board.setToken(coordinates, getActivePlayer().token);\n            updateField(x, y, getActivePlayer().token);\n            countSteps += 1;\n        } else {\n            updateStatusGame(\"Set the value to an empty cell!\");\n            return false;\n        }\n        if (isVictory()) {\n            updateStatusGame(\n                `${getActivePlayer().name} is the winner! Game over!`\n            );\n            return true;\n        }\n        if (countSteps === 9) {\n            updateStatusGame(`It's a draw! Game over!`);\n            return true;\n        }\n        switchPlayerTurn();\n        updateTurnStatus(`${getActivePlayer().name}'s turn.`);\n        return false;\n    };\n\n    return {\n        playRound,\n    };\n}\n\nfunction updateStatusGame(text = \"\") {\n    const statusGame = document.getElementById(\"status-game\");\n    statusGame.innerHTML = text;\n}\n\nfunction updateTurnStatus(text = \"\") {\n    const statusTurn = document.getElementById(\"status-turn\");\n    statusTurn.innerHTML = text;\n}\n\nfunction ScreenController(playRound) {\n    const gameBoard = document.getElementById(\"game-board\");\n    const restartBtn = document.getElementById(\"restart-btn\");\n    const fields = [...gameBoard.querySelectorAll(\".field\")];\n\n    const updateField = (x, y, token) => {\n        const currentField = fields.find((el) => {\n            return Number(el.dataset.x) === x && Number(el.dataset.y) === y;\n        });\n        const currentSpan = currentField.querySelector(\"span\");\n        currentSpan.innerText = token;\n    };\n\n    const clearCellValues = () => {\n        fields.forEach((field) => {\n            const span = field.querySelector(\"span\");\n            span.innerText = \"-\";\n        });\n    };\n\n    const clickHandlerBoard = (evt) => {\n        const { currentTarget } = evt;\n        const { x, y } = currentTarget.dataset;\n        const isGameOver = playRound(\n            { x: Number(x), y: Number(y) },\n            updateField\n        );\n        if (isGameOver) {\n            fields.forEach((field) => {\n                field.removeEventListener(\"click\", clickHandlerBoard);\n            });\n        }\n    };\n\n    fields.forEach((field) => {\n        field.addEventListener(\"click\", clickHandlerBoard);\n    });\n\n    restartBtn.addEventListener(\"click\", () => {\n        runGame();\n        clearCellValues();\n    });\n}\n\nfunction runGame() {\n    const { playRound } = GameController();\n    ScreenController(playRound);\n}\n\nrunGame();\n"],"names":["updateStatusGame","text","statusGame","document","getElementById","innerHTML","runGame","playRound","GameController","playerOneName","playerTwoName","board","Gameboard","hashIdBoard","i","j","push","Cell","x","y","hashId","value","addToken","token","getValue","getCoordinates","getHashId","getBoard","setToken","countSteps","players","name","activePlayer","switchPlayerTurn","getActivePlayer","isVictory","comb","currentBoardLineTokens","currentBoardLine","map","item","currentCell","flat","filter","cell","join","isCorrectRound","coordinates","updateField","updateTurnStatus","statusTurn","ScreenController","gameBoard","restartBtn","fields","querySelectorAll","currentSpan","currentField","find","el","Number","dataset","querySelector","innerText","clearCellValues","forEach","field","span","clickHandlerBoard","evt","currentTarget","removeEventListener","addEventListener"],"version":3,"file":"index.e872fccd.js.map"}